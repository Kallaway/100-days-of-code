{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","image","synth","window","speechSynthesis","show","id","document","getElementById","setAttribute","hide","className","type","name","onChange","e","target","files","onClick","data","FormData","append","axios","post","headers","then","res","textSpan","text","utterThis","SpeechSynthesisUtterance","speak","innerHTML","clearOutput","setInterval","speaking","paused","clearInterval","class","pause","resume","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAmHeA,MA/Gf,WAGE,IA+BIC,EA/BEC,EAAQC,OAAOC,gBAqBrB,SAASC,EAAKC,GACZC,SAASC,eAAeF,GAAIG,aAAa,QAAS,WAGpD,SAASC,EAAKJ,GACZC,SAASC,eAAeF,GAAIG,aAAa,QAAS,UAkDpD,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,2BACE,0BAAML,GAAG,mBAAT,mBAGA,6BAAM,6BACN,2BAAOM,KAAK,OAAON,GAAG,cAAcO,KAAK,QAAQC,SAnDzD,SAA0BC,GACxBV,EAAK,aACLK,EAAK,mBACLT,EAAQc,EAAEC,OAAOC,MAAM,MAiDjB,4BAAQX,GAAG,YAAYY,QA9C/B,SAAqBH,GACnBL,EAAK,eACLA,EAAK,aACLL,EAAK,iBAEL,IAAMc,EAAO,IAAIC,SACjBD,EAAKE,OAAO,QAASpB,GAQrBqB,IAAMC,KAAK,+BAAgCJ,EAN5B,CACbK,QAAS,CACP,eAAgB,yBAIqCC,MAAK,SAAAC,GAC5D,IAAMC,EAAWpB,SAASC,eAAe,YACzCE,EAAK,iBACLL,EAAK,cACLA,EAAK,eAvDT,SAAeuB,GACb,IAAMC,EAAY,IAAIC,yBAAyBF,GAC/C1B,EAAM6B,MAAMF,GAsDVE,CAAML,EAAIP,MACVQ,EAASK,UAAYN,EAAIP,KAEzB,IAAMc,EAAcC,aAAY,WAC1BhC,EAAMiC,UACR9B,EAAK,cACLK,EAAK,oBACKR,EAAMiC,UAAajC,EAAMkC,SACnC1B,EAAK,cACLL,EAAK,mBACLgC,cAAcJ,MAEf,SAe8CK,MAAM,UAAnD,UAGA,0BAAMhC,GAAG,gBAAgBgC,MAAM,UAA/B,0BAGA,6BAAM,6BACN,0BAAMhC,GAAG,aAAagC,MAAM,UAC1B,4BAAQhC,GAAG,WAAWY,QAtFhC,WACER,EAAK,YACLL,EAAK,aACLH,EAAMqC,UAmFE,SAGA,4BAAQjC,GAAG,YAAYY,QAnFjC,WACER,EAAK,aACLL,EAAK,YACLH,EAAMsC,UAgF0CF,MAAM,UAA9C,UAGA,6BAAM,6BACN,0BAAMhC,GAAG,kBC/FDmC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,SD2H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.b339802c.chunk.js","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\nfunction App() {\n  // Text to speech\n\n  const synth = window.speechSynthesis;\n\n  function speak(text) {\n    const utterThis = new SpeechSynthesisUtterance(text);\n    synth.speak(utterThis);\n  }\n\n  function pause() {\n    hide(\"pauseBtn\");\n    show(\"resumeBtn\");\n    synth.pause();\n  }\n\n  function resume() {\n    hide(\"resumeBtn\");\n    show(\"pauseBtn\");\n    synth.resume();\n  }\n\n  // DOM functions\n\n  function show(id) {\n    document.getElementById(id).setAttribute(\"class\", \"visible\");\n  }\n\n  function hide(id) {\n    document.getElementById(id).setAttribute(\"class\", \"hidden\");\n  }\n\n  // Event handlers\n\n  let image;\n\n  function handleFileSelect(e) {\n    show(\"submitBtn\");\n    hide(\"selectImageSpan\");\n    image = e.target.files[0];\n  }\n\n  function handleClick(e) {\n    hide(\"uploadInput\");\n    hide(\"submitBtn\");\n    show(\"uploadingSpan\");\n\n    const data = new FormData();\n    data.append('image', image);\n    \n    const config = {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    };\n\n    axios.post(\"http://localhost:5000/upload\", data, config).then(res => {\n      const textSpan = document.getElementById(\"textSpan\");\n      hide(\"uploadingSpan\");\n      show(\"outputSpan\");\n      show(\"uploadInput\");\n      speak(res.data);\n      textSpan.innerHTML = res.data;\n\n      const clearOutput = setInterval(() => {\n        if (synth.speaking) {\n          show(\"outputSpan\");\n          hide(\"selectImageSpan\");\n        } else if (!synth.speaking && !synth.paused) {\n          hide(\"outputSpan\");\n          show(\"selectImageSpan\");\n          clearInterval(clearOutput);\n        }\n      }, 2000);\n    });\n  }\n\n  //\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <span id=\"selectImageSpan\">\n            Select an image\n          </span>\n          <br /><br />\n          <input type=\"file\" id=\"uploadInput\" name=\"image\" onChange={handleFileSelect} />\n          <button id=\"submitBtn\" onClick={handleClick} class=\"hidden\">\n            SUBMIT\n          </button>\n          <span id=\"uploadingSpan\" class=\"hidden\">\n            Uploading the image...\n          </span>\n          <br /><br />\n          <span id=\"outputSpan\" class=\"hidden\">\n            <button id=\"pauseBtn\" onClick={pause}>\n              PAUSE\n            </button>\n            <button id=\"resumeBtn\" onClick={resume} class=\"hidden\">\n              RESUME\n            </button>\n            <br /><br />\n            <span id=\"textSpan\"></span>\n          </span>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}